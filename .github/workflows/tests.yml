name: Tests

on: push

jobs:
  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.35.0-jammy

    # run an EdgeDb in the background that will be connected to from our app
    services:
      edgedb:
        image: edgedb/edgedb:3.0
        env:
          EDGEDB_SERVER_SECURITY: insecure_dev_mode
        ports:
          - 5656:5656

    # these will be used by all EdgeDb clients in order to connect to the above
    env:
      EDGEDB_CLIENT_SECURITY: insecure_dev_mode
      EDGEDB_DSN: edgedb://localhost:5656

    steps:
      - uses: actions/checkout@v3

      # setup NodeJs
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      # setup all our packages (with caching)
      - uses: bahmutov/npm-install@v1
        with:
          working-directory: |
            e2e
            application/common/elsa-constants
            application/common/elsa-types
            application/backend
            application/frontend
          install-command: npm ci --install-links=false

      # Sanity/lint checks
      - name: Run pre build lint checks
        run: |
          if ! grep -qR "container.*tsyringe" src/ tests/ jobs/; then
            echo "No use of global tsyringe container"
          else
            echo "Found an import of the global tsyringe container"
            exit 1
          fi
        working-directory: application/backend

      # unit tests can run first before any databases are set up
      - name: Run unit tests
        run: npm run test:unit
        working-directory: application/backend
        env:
          # we explicitly make sure that if a unit test *did* try to access the db it will fail
          EDGEDB_DSN: undefined

      # install the EdgeDb CLI
      - uses: edgedb/setup-edgedb@v1.2.2
        with:
          cli-version: stable
          server-version: none
          server-dsn: ${{ env.EDGEDB_DSN }}

      # get our database schema correct
      - run: edgedb migrate
        working-directory: application/backend

      # generate our types
      - run: npm run edgetypes
        working-directory: application/backend

      # A simple Typescript compile can find some syntax errors
      - name: Typescript compile
        run: npx tsc --noEmit
        working-directory: application/backend

      # esbuild should succeed and contain no warnings
      - name: esbuild check
        run: |
          output=$(npx node bundle-build.js 2>&1)
          if [[ $? == 0 ]]; then
            rm -r server
            echo "esbuild ran successfully"
          else
            echo "esbuild did not succeed"
            echo "${output}"
            exit 1
          fi
        working-directory: application/backend

      # db tests run only in the backend and concentrate on validating edgeql queries
      - name: Run database tests
        run: npm run test:db
        working-directory: application/backend

      # build our React frontend
      - run: npm run build:dev
        working-directory: application/frontend
        env:
          # whilst ever we allow React warnings in dev we need to do this to switch off CI over strictness
          CI: false

      # integration tests run only in the backend and concentrate on auth/http/trpc mechanics (but need frontend files for something to serve as HTML)
      - name: Run integration tests
        run: npm run test:integration
        working-directory: application/backend

      - name: Run service tests
        run: npm run test:service
        working-directory: application/backend

      # setup a cache explicitly for Playwright dependencies (browser dependencies at the OS level)
      # https://justin.poehnelt.com/posts/caching-playwright-in-github-actions/
      #- uses: actions/cache@v3
      #  id: playwright-cache
      #  with:
      #    path: |
      #      ~/.cache/ms-playwright
      #    key: ${{ runner.os }}-playwright-${{ hashFiles('./e2e/package-lock.json') }}

      # install the OS playwright dependencies but hopefully with caching
      #- run: npx playwright install --with-deps chromium
      #  working-directory: e2e
      #  if: steps.playwright-cache.outputs.cache-hit != 'true'
      #- run: npx playwright install-deps
      #  working-directory: e2e
      #  if: steps.playwright-cache.outputs.cache-hit == 'true'

      - name: Setup E2E database state
        run: npm run test:blank
        working-directory: application/backend

      # run the UI tests
      - run: npx playwright test --trace on
        working-directory: e2e
        env:
          PWTEST_SKIP_TEST_OUTPUT: 1

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30
